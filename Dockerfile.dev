FROM ubuntu:16.04

RUN apt-get update -qq && apt-get install -qqy \
    git wget bzip2 file unzip libtool pkg-config cmake build-essential \
    automake yasm gettext autopoint vim python git-svn ninja-build && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*


RUN git config --global user.name "LLVM MinGW" && \
    git config --global user.email root@localhost

WORKDIR /build

ARG CORES=4

ENV TOOLCHAIN_PREFIX=/opt/llvm-mingw

# Build LLVM
COPY build-llvm.sh .
RUN ./build-llvm.sh $TOOLCHAIN_PREFIX

# Build a second time, with patches, to avoid having to rerun the full step above
COPY patches/clang-*.patch ./patches/
RUN cd llvm/tools/clang && \
    git am ../../../patches/clang-*.patch
RUN ./build-llvm.sh $TOOLCHAIN_PREFIX

ENV TOOLCHAIN_ARCHS="x86_64"

# Install the usual $TUPLE-clang binaries
COPY wrappers/*.sh ./wrappers/
COPY install-wrappers.sh .
RUN ./install-wrappers.sh $TOOLCHAIN_PREFIX

# Cheating: Pull windres from the normal binutils package.
# llvm-rc isn't fully usable as a replacement for windres yet.
RUN apt-get update -qq && \
    apt-get install -qqy binutils-mingw-w64-x86-64 && \
    cp /usr/bin/x86_64-w64-mingw32-windres $TOOLCHAIN_PREFIX/bin/x86_64-w64-mingw32-windresreal && \
    apt-get remove -qqy binutils-mingw-w64-x86-64 && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# Build MinGW-w64
COPY build-mingw-w64.sh .
RUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX

# Build compiler-rt
COPY build-compiler-rt.sh .
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX

# Build C test applications
ENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH

COPY test/*.c ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        for test in hello hello-tls crt-test; do \
            $arch-w64-mingw32-clang $test.c -o $test-$arch.exe || exit 1; \
        done; \
    done

# Build libunwind/libcxxabi/libcxx
COPY build-libcxx.sh merge-archives.sh ./
RUN ./build-libcxx.sh $TOOLCHAIN_PREFIX

# Build C++ test applications
COPY test/*.cpp ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        for test in hello-cpp hello-exception; do \
            $arch-w64-mingw32-clang++ $test.cpp -o $test-$arch.exe || exit 1; \
        done; \
    done

# Strip the final toolchain. (This doesn't reduce the total docker image
# size as long as it is in a separate RUN layer though.)
COPY strip-llvm.sh .
RUN ./strip-llvm.sh $TOOLCHAIN_PREFIX

RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/*.dll .; \
    done
